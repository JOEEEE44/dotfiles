[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'joeeee44/vvemt'

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
build = 'UpdateRemotePlugins'
# hook_add = '''
#   let g:deoplete#enable_at_startup = 1
#   " <TAB>: completion.
#   inoremap <silent><expr> <TAB>
#     \ pumvisible() ? "\<C-n>" :
#     \ <SID>check_back_space() ? "\<TAB>" :
#     \ deoplete#manual_complete()
#   function! s:check_back_space() abort "{{{
#     let col = col('.') - 1
#     return !col || getline('.')[col - 1]  =~ '\s'
#   endfunction"}}}
#   " <S-TAB>: completion back.
#   inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
#   " <BS>: close popup and delete backword char.
#   inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"
#   " <CR>: close popup and save indent.
#   inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
#   function! s:my_cr_function() abort
#     return deoplete#cancel_popup() . "\<CR>"
#   endfunction
# '''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/vimshell'
if = "!has('nvim')"
hook_add = '''
source ~/.config/nvim/plugins/vimshell.rc.vim
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nmap ; :Denite buffer -split=floating -winrow=1<CR>
  nmap <leader>t :Denite file/rec -split=floating -winrow=1<CR>
  nnoremap <leader>g :<C-u>Denite grep:. -no-empty -mode=normal<CR>
  nnoremap <leader>j :<C-u>DeniteCursorWord grep:. -mode=normal<CR>
'''

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
hook_add = '''
  nnoremap fo :VimFilerBufferDir<CR>
  nnoremap fp :VimFilerExplorer -split -simple -winwidth=35 -toggle -no-quit<CR>
'''

[[plugins]]
repo ="kristijanhusak/defx-git"
hook_add = '''
call defx#custom#column('git', 'indicators', {
  \ 'Modified'  : '✹',
  \ 'Staged'    : '✚',
  \ 'Untracked' : '✭',
  \ 'Renamed'   : '➜',
  \ 'Unmerged'  : '═',
  \ 'Ignored'   : '☒',
  \ 'Deleted'   : '✖',
  \ 'Unknown'   : '?'
  \ })
'''

[[plugins]]
repo ="kristijanhusak/defx-icons"

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-git', 'defx-icons']
hook_add = '''
call defx#custom#column('icon', {
      \ 'directory_icon': '▸',
      \ 'opened_icon': '▾',
      \ 'root_icon': ' ',
      \ })

call defx#custom#column('filename', {
      \ 'min_width': 40,
      \ 'max_width': 40,
      \ })

call defx#custom#column('mark', {
      \ 'readonly_icon': '✗',
      \ 'selected_icon': '✓',
      \ })

call defx#custom#option('_', {
      \ 'columns': 'indent:git:icons:filename',
      \ 'show_ignored_files': 1,
      \ })

nnoremap <silent>fi :<C-u>Defx -new `expand('%:p:h')` -search=`expand('%:p')`<CR>
autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
    nnoremap <silent><buffer><expr> c defx#do_action('copy')
    nnoremap <silent><buffer><expr> m defx#do_action('move')
    nnoremap <silent><buffer><expr> p defx#do_action('paste')
    nnoremap <silent><buffer><expr> l defx#do_action('open')
    nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d defx#do_action('remove')
    nnoremap <silent><buffer><expr> r defx#do_action('rename')
    nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
    nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
  endfunction
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'mattn/excitetranslate-vim'

[[plugins]]
repo = 'mattn/webapi-vim'
hook_add = '''
  nnoremap :et :ExciteTranslate
  vnoremap :et :ExciteTranslate
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
build = 'coc#util#install()'
hook_add = 'source ~/.config/nvim/coc-setting.vim'

[[plugins]]
repo = 'rust-lang/rust.vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
  set helplang=ja
'''

# [[plugins]]
# repo = 'SpaceVim/SpaceVim'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
  colorscheme onedark
  let g:onedark_termcolors=256
'''

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'lilydjwg/colorizer'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
  nnoremap :ut :UndotreeToggle
  if has("persistent_undo")
    set undodir=~/.undodir/
    set undofile
  endif
  let g:undotree_SetFocusWhenToggle = 1
  let g:undotree_WindowLayout = 'topleft'
  let g:undotree_SplitWidth = 35
  let g:undotree_diffAutoOpen = 1
  let g:undotree_diffpanelHeight = 25
  let g:undotree_RelativeTimestamp = 1
  let g:undotree_TreeNodeShape = '*'
  let g:undotree_HighlightChangedText = 1
  let g:undotree_HighlightSyntax = "UnderLined"
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  nmap s <Plug>(easymotion-overwin-f2)
  vmap s <Plug>(easymotion-bd-f2)
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
  nnoremap :mmm :MultipleCursorsFind
  vnoremap :mmm :MultipleCursorsFind
'''

[[plugins]]
repo = 'vim-scripts/grep.vim'

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'peitalin/vim-jsx-typescript'
hook_add = '''
  autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx
'''

[[plugins]]
repo = 'styled-components/vim-styled-components'

# [[plugins]]
# repo = 'posva/vim-vue'
# hook_add = '''
#   autocmd FileType vue syntax sync fromstart
#   autocmd BufNewFile,BufRead *.{html,htm*} set filetype=html
#   autocmd BufNewFile,BufRead *.{html,htm,vue*} set filetype=html
#   autocmd BufNewFile,BufRead *.erb set filetype=eruby.html
# '''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  let g:airline_powerline_fonts = 1
  set laststatus=2
  let g:airline#extensions#tabline#enabled = 1
  let g:airline_theme = 'dark'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  let g:airline#extensions#branch#enabled = 1
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

# [[plugins]]
# repo = 'edkolev/tmuxline.vim'

# [[plugins]]
# repo = ''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  set splitright
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_auto_colors = 0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=236 ctermfg=236
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=238 ctermfg=238
'''
